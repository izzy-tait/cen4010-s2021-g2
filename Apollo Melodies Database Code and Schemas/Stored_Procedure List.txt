Stored Procedure List - Documentation Work in Progress (Total:55)
======================================================



Level 1 Procedures - (Internal Helper Functions)
================================================
/*********GETTERS and SETTERS*********/
DEV_GENERIC_SET_ID_NUMBER (IN CounterType varchar(255), IN CounterHeader varchar(255), OUT NEW_CONCATENATE_NUMBER varchar(255)) - [Status: Complete and Tested]

DEV_GET_PROFILE_ID_NUMBER  (IN THIS_MEMBER_ID varchar(255),IN THIS_DATE_CREATED timestamp, OUT THIS_MEMBER_NUMBER varchar(255)) - [Status: Complete and Tested]

/*********SUBPROCESSES*********/
DEV_PROFILE_IF_USERNAME_EXISTS (IN USERNAME varchar(255), OUT DOES_EXIST tinyint(1)) - [Status: Complete and Tested]

DEV_PROFILE_IF_EMAIL_EXISTS (IN THIS_EMAIL_ADDRESS varchar(255), OUT DOES_EXIST tinyint(1)) - [Status: Complete and Tested]

DEV_PROFILE_IF_MEMBER_NUMBER_EXISTS(IN THIS_MEMBER_NUMBER varchar(255),OUT DOES_EXIST tinyint(1)) - [Status: Complete and Tested]

DEV_UPDATE_ACTIVITY_LOG (IN THIS_ACTIVITY_TYPE varchar(20),IN THIS_DOER_MEMBER_NUMBER varchar(255),IN THIS_RECIPIENT_MEMBER_NUMBER varchar(255),IN THIS_QUIZ_NUMBER varchar(255),IN THIS_MESSAGE_NUMBER varchar(255),IN THIS_BLOCK_NUMBER varchar(255),IN THIS_BLOG_NUMBER varchar(255),IN THIS_MEDIA_NUMBER varchar(255),IN THIS_ACTIVITY_DETAIL varchar(3000), OUT WAS_SUCCESSFUL tinyint(1)) - [Status: Complete and Tested]

DEV_FRIEND_IS_FRIEND (IN INQUIRING_PROFILE varchar(255),IN PROFILE_IN_QUESTION varchar(255),OUT IS_FRIEND tinyint(1)) - [Status: Complete and Tested]

DEV_BLOCKING_IS_BLOCKED  (IN THIS_BLOCKER_PROFILE_NUMBER varchar(255), IN THIS_BLOCKEE_PROFILE_NUMBER varchar(255),OUT IS_BLOCKED tinyint(1)) - [Status: Complete and Tested]

ENCRPYTION_ON_PHP_END ***



Level 2 Procedures - (Functions called by the site)
===================================================
/*************** High Level Functionality Grouping: Profile Management ***************/
DEV_PROFILE_CREATE_PROFILE (IN THIS_MEMBER_ID varchar(80), IN THIS_ENCRYPT_PASSWORD varchar(50), IN THIS_FIRST_NAME varchar(120),IN THIS_LAST_NAME varchar(120), IN THIS_EMAIL_ADDRESS varchar(100),OUT IS_SUCCESSFUL tinyint(1)) - [Status: Complete and Tested]
	##PHP CALLED BEFORE SP: DEV_PROFILE_IF_USERNAME_EXISTS - [USERNAME]
	##PHP CALLED BEFORE SP: DEV_PROFILE_IF_EMAIL_EXISTS - [EMAIL]
	call: DEV_GENERIC_SET_ID_NUMBER
	(Writes Values to Member Table)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_CREATED]
	*Return #SQLCODE:(SELECT * FROM `DEV_MEMBER_PROFILE` WHERE MEMBER_NUMBER = THIS_MEMBER_NUMBER;)
DEV_PROFILE_UPDATE_PROFILE (IN THIS_MEMBER_NUMBER varchar(255), IN THIS_MEMBER_ID varchar(80),IN THIS_FIRST_NAME varchar(120), IN THIS_LAST_NAME varchar(120), IN THIS_EMAIL_ADDRESS varchar(100),IN THIS_SEARCHABLE_PROFILE_FLAG tinyint(1))) - [Status: Complete and Tested]
	##PHP CALLED BEFORE SP: DEV_GET_PROFILE_ID_NUMBER
	##PHP CALLED BEFORE SP: DEV_PROFILE_IF_USERNAME_EXISTS - [USERNAME]
	##PHP CALLED BEFORE SP: DEV_PROFILE_IF_EMAIL_EXISTS - [EMAIL]
	(Updates Values to Member Table)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_UPDATED]
	*Return True/False
DEV_PROFILE_CHANGE_PASSWORD (IN THIS_MEMBER_NUMBER varchar(80),IN THIS_ENCRYPT_PASSWORD varchar(50))) - [Status: Complete and Tested]
	#SQLCODE:(UPDATE DEV_MEMBER_PROFILE SET ENCRYPT_PASSWORD = THIS_ENCRYPT_PASSWORD WHERE MEMBER_NUMBER = THIS_MEMBER_NUMBER;)
	call DEV_UPDATE_ACTIVITY_LOG - [PROFILE_PASSWORD]
	*Return #SQLCODE:(SELECT * FROM DEV_MEMBER_PROFILE WHERE MEMBER_NUMBER = THIS_MEMBER_NUMBER;)
DEV_PROFILE_DELETE_PROFILE DEV_PROFILE_DELETE_PROFILE(IN THIS_MEMBER_NUMBER varchar(80))) - [Status: Complete and Tested]
	##PHP CALLED BEFORE SP: DEV_GET_PROFILE_ID_NUMBER
	(Changes Logical Delete Boolean to True)
	(Updates Date Deleted to Current Timestamp)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_DELETED]
	*Return #SQLCODE:(SELECT * FROM DEV_MEMBER_PROFILE WHERE MEMBER_NUMBER = THIS_MEMBER_NUMBER;)
DEV_PROFILE_UN_DELETE_PROFILE) (IN THIS_MEMBER_NUMBER varchar(80)) - [Status: Complete and Tested]
	call: DEV_GET_PROFILE_ID_NUMBER
	(Changes Logical Delete Boolean to True)
	(Updates Date Deleted to NULL)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_UNDELETED]
	*Return #SQLCODE:(SELECT * FROM DEV_MEMBER_PROFILE WHERE MEMBER_NUMBER = THIS_MEMBER_NUMBER;)
DEV_PROFILE_SET_STATUS_ONLINE - [Status: Complete and Tested]
	(UPDATE DEV_MEMBER_PROFILE SET IS_ONLINE_FLAG = TRUE WHERE MEMBER_ID = (Input Paramater);)
	call: DEV_UPDATE_ACTIVITY_LOG (IN THIS_MEMBER_NUMBER varchar(255)) - [PROFILE_ONLINE]
DEV_PROFILE_SET_STATUS_OFFLINE (IN THIS_MEMBER_NUMBER varchar(255)) - [Status: Complete and Tested]
	UPDATE DEV_MEMBER_PROFILE SET IS_ONLINE_FLAG = FALSE WHERE MEMBER_ID = (Input Paramater);)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_OFFLINE];


/*************** High Level Functionality Grouping: Admin Only Tools ***************/
DEV_ADMIN_BAN_PROFILE
	call: DEV_GET_PROFILE_ID_NUMBER
	(Set Member Ban Flag to True)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_BANNED]
	*Return True/False
DEV_ADMIN_UN_BAN_PROFILE
	call: DEV_GET_PROFILE_ID_NUMBER
	(Set Member Ban Flag to False)
	call: DEV_UPDATE_ACTIVITY_LOG - [PROFILE_UNBANNED]
	*Return True/False
DEV_ADMIN_VIEW_USER_ACTIVITY ###Direct SQL Call
	call: DEV_GET_PROFILE_ID_NUMBER (On Doer)
	call: DEV_GET_PROFILE_ID_NUMBER (On Receiver)
	#SQLCODE:(SELECT *FROM DEV_ACTIVITY_LOG WHERE )
DEV_ADMIN_GET_ADMIN_MESSAGES 
	(TBA)


/************** High Level Functionality Grouping: Friendship Management ***************/
DEV_FRIEND_SEND_REQUEST
	call: DEV_GET_PROFILE_ID_NUMBER
	call: DEV_GENERIC_SET_ID_NUMBER - (For the Friendship)
	(Update Friend list Table)
	call: DEV_SEND_MESSAGE - [You have a new friend request]
	call: DEV_UPDATE_ACTIVITY_LOG - [FRIEND_REQUESTED]
	*Return True/False
DEV_FRIEND_ACCEPT_REQUEST
	call: DEV_GET_PROFILE_ID_NUMBER
	(Update Friend list Table)
	call: DEV_SEND_MESSAGE - [Friend Request accepted]
	call: DEV_UPDATE_ACTIVITY_LOG - [FRIEND_ACCEPTED]
	*Return True/False
DEV_FRIEND_REJECT_REQUEST
	call: DEV_GET_PROFILE_ID_NUMBER
	(Update Friend list Table)
	call: DEV_UPDATE_ACTIVITY_LOG - [FRIEND_REJECTED]
	*Return True/False
DEV_FRIEND_EDIT_PRIVACY 
	call: DEV_GET_PROFILE_ID_NUMBER
	(Update Friend list Table)
	call: DEV_UPDATE_ACTIVITY_LOG - [FRIEND_PRIVACY]
	*Return True/False
DEV_FRIEND_DELETE_FRIENDSHIP
	call: DEV_GET_PROFILE_ID_NUMBER
	call: DEV_FRIEND_IS_FRIEND
	(Update Friend list Table)
	(Set Is_Deleted boolean to true)
	(Set Date Deleted to Current_Timestamp)
	call: DEV_UPDATE_ACTIVITY_LOG - [FRIEND_DELETE]
	*Return True/False
DEV_FRIEND_GET_FRIEND_LIST
	call: DEV_GET_PROFILE_ID_NUMBER
	*Return #SQLCODE:(SELECT * FROM DEV_FRIEND_LIST WHERE FRIENDOR_MEMBER_NUMBER = (input paramater 1) OR FRIENDEE_MEMBER_NUMBER = (input paramater 1))

	
/************** High Level Functionality Grouping: User Block Management ***************/
DEV_BLOCKING_BLOCK_USER
	call: DEV_GET_PROFILE_ID_NUMBER
	call: DEV_FRIEND_IS_FRIEND
	---(On True)--->call: DEV_FRIEND_DELETE_FRIENDSHIP
	call: DEV_BLOCKING_IS_BLOCKED
	---(On True)--->*Return True
	call: DEV_GENERIC_SET_ID_NUMBER -(For the Block)
	#SQLCODE:(INSERT INTO DEV_BLOCK_LIST (BLOCK_RECORD_NUMBER,BLOCKER_PROFILE_NUMBER,BLOCKEE_PROFILE_NUMBER) VALUES((input paramater 1), (input paramater 2), (input paramater 3));)
	call: DEV_UPDATE_ACTIVITY_LOG - [USER_BLOCK]
	*Return True/False
DEV_BLOCKING_GET_BLOCK_LIST
	call: DEV_GET_PROFILE_ID_NUMBER
	*Return #SQLCODE:(Select * from DEV_BLOCK_LIST WHERE BLOCKER_PROFILE_NUMBER = "(input paramater)" AND IS_DELETED = FALSE;)
DEV_BLOCKING_UNBLOCK_USER
	call: DEV_GET_PROFILE_ID_NUMBER
	call: DEV_BLOCKING_IS_BLOCKED
	---(On False)--->*Return True
	#SQLCODE:(UPDATE DEV_BLOCK_LIST SET IS_DELETED = True,DATE_DELETED = CURRENT_TIMESTAMP WHERE BLOCKER_PROFILE_NUMBER = (input parameter 1) AND BLOCKEE_PROFILE_NUMBER  = (input parameter 2) AND IS_DELETED != True;)
	call: DEV_UPDATE_ACTIVITY_LOG - [USER_UNBLOCK]
	*Return True/False


/************** High Level Functionality Grouping: Quiz Management ***************/
DEV_QUIZ_CREATE_QUIZ
	call: DEV_GET_PROFILE_ID_NUMBER
	call: DEV_PROFILE_IF_FIELD_VALUE_EXISTS - (On Quiz Name)
	---(On True)--->*Return false
	call: DEV_GENERIC_SET_ID_NUMBER-(for the quiz number)
	#SQLCODE:(INSERT INTO DEV_QUIZ_HEADER (QUIZ_NUMBER,QUIZ_NAME,QUIZ_CREATOR_ID,QUIZ_GENRE,PASS_PERCENTAGE)VALUES((input paramater 1),(input paramater 2),(input paramater 3),(input paramater 4),(input paramater 5));)
	call: DEV_UPDATE_ACTIVITY_LOG - [OUIZ_CREATE]
	*Return True/False
DEV_QUIZ_CHANGE_QUIZ_HEADER_INFO
	call: DEV_GET_PROFILE_ID_NUMBER
	call: DEV_PROFILE_IF_FIELD_VALUE_EXISTS - (On Quiz Name)
	---(On False)--->*Return false
	call: DEV_GET_QUIZ_NUMBER
	#SQLCODE:(UPDATE DEV_QUIZ_HEADER SET QUIZ_NAME = (Paramater 1), QUIZ_GENRE = (Paramater 2),DATE_LAST_EDITED = CURRENT_TIMESTAMP, PASS_PERCENTAGE = (Paramater 3);)
	call: DEV_UPDATE_ACTIVITY_LOG - [QUIZ_UPDATE]
	*Return True/False
DEV_QUIZ_GET_QUIZ
	*Return #SQLCODE:(SELECT DEV_QUIZ_QUESTION.QUIZ_NUMBER, DEV_QUIZ_QUESTION.QUESTION_NUMBER, DEV_QUIZ_QUESTION.MUSIC_SOURCE_URL, DEV_QUIZ_QUESTION.ANSWER_1, DEV_QUIZ_QUESTION.ANSWER_2, DEV_QUIZ_QUESTION.ANSWER_3, DEV_QUIZ_QUESTION.ANSWER_4,DEV_QUIZ_QUESTION.CORRECT_ANSWER, DEV_QUIZ_QUESTION.HINT FROM DEV_QUIZ_QUESTION INNER JOIN DEV_QUIZ_HEADER ON DEV_QUIZ_QUESTION.QUIZ_NUMBER = DEV_QUIZ_HEADER.QUIZ_NUMBER WHERE DEV_QUIZ_QUESTION.QUIZ_NUMBER = (Parmater 1) AND DEV_QUIZ_QUESTION.IS_DELETED = 0 AND DEV_QUIZ_HEADER.IS_DELETED = 0 ORDER BY DEV_QUIZ_QUESTION.QUESTION_NUMBER);
DEV_DELETE_QUIZ
	call: DEV_GET_QUIZ_NUMBER
	#SQLCODE: (UPDATE TABLE DEV_QUIZ_HEADER SET IS_DELETED = True, DATE_DELETED = Current_Timestamp WHERE QUIZ_NUMBER = (Paramater 1))
	call: DEV_UPDATE_ACTIVITY_LOG - [QUIZ_DELETE]
	*Return True/False
DEV_QUIZ_ADD_QUESTION
	call: DEV_CREATE_QUIZ_QUESTION_NUMBER
	#SQLCODE:(INSERT INTO DEV_QUIZ_QUESTION (QUIZ_NUMBER,QUESTION_NUMBER,MUSIC_SOURCE_URL,ANSWER_1,ANSWER_2,ANSWER_3,ANSWER_4,CORRECT_ANSWER,HINT) VALUES((Paramater 1),(Paramater 2),(Paramater 3),(Paramater 4),(Paramater 5),(Paramater 6),(Paramater 7),(Paramater 8),(Paramater 9))
	#SQLCODE:(UPDATE TABLE DEV_QUIZ_HEADER SET DATE_LAST_EDITED = Current_Timestamp WHERE QUIZ_NUMBER = (Paramater 1);
	call: DEV_UPDATE_ACTIVITY_LOG - [OUIZ_ADD_QUESTION]
	*Return True/False
DEV_QUIZ_DELETE_QUESTION
	#SQLCODE:(UPDATE TABLE DEV_QUIZ_QUESTION SET IS_DELETED = TRUE, DATE_DELETED = Current_Timestamp WHERE QUIZ_NUMBER = (Paramater 1) AND QUESTION_NUMBER = (Paramater 2);)
	#SQLCODE:(UPDATE TABLE DEV_QUIZ_HEADER SET DATE_LAST_EDITED = Current_Timestamp WHERE QUIZ_NUMBER = (Paramater 1);)
	call: DEV_UPDATE_ACTIVITY_LOG - [OUIZ_DEL_QUESTION]
	*Return True/False
DEV_QUIZ_COMPLETE_QUIZ_HEADER
	call: DEV_SET_QUIZ_HISTORY_NUMBER
	#SQLCODE: (INSERT INTO DEV_QUIZ_HISTORY_HEADER (QUIZ_HISTORY_NUMBER, QUIZ_NUMBER,QUIZ_CREATOR_NUMBER,QUIZ_COMPLETER_NUMBER,DATE_COMPLETED,TOTAL_QUESTIONS,TOTAL_QUESTIONS_CORRECT,SCORE,IS_PASSING) VALUES((SP GENERATED),(Parameter 1),(Parameter 2),(Parameter 3),(Parameter 4),(Parameter 5),(Parameter 6),(Parameter 7),(Parameter 8));)
	call: DEV_UPDATE_ACTIVITY_LOG - [OUIZ_COMPLETED]
	*Return #SQLCODE: (SELECT * FROM DEV_QUIZ_HISTORY_HEADER WHERE QUIZ_HISTORY_NUMBER = (SP GENERATED);)
DEV_QUIZ_COMPLETE_QUIZ_QUESTION
	#SQLCODE: (INSERT INTO DEV_QUIZ_HISTORY_QUESTION (QUIZ_HISTORY_NUMBER,QUIZ_NUMBER,QUESTION_NUMBER,MUSIC_SOURCE_URL,ANSWER_1 ,ANSWER_2 ,ANSWER_3 ,ANSWER_4,ANSWER_CHOSEN,CORRECT_ANSWER,DATE_COMPLETED) VALUES((Paramater 1),(Paramater 2),(Paramater 3),(Paramater 4),(Paramater 5),(Paramater 6),(Paramater 7),(Paramater 8),(Paramater 9),(Paramater 10),(Paramater 11));)
	
	
/************** High Level Functionality Grouping: Message Management ***************/
DEV_MESSAGE_GET_INBOX_LIST
	*Return #SQLCODE: (SELECT * FROM DEV_MESSAGE_HISTORY WHERE RECIPIENT_NUMBER = (Paramater 1) AND MESSAGE_STATUS = 'SENT' AND IS_ADMIN_MESSAGE = FALSE AND IS_RECIPIENT_DELETED = FALSE;)
DEV_MESSAGE_GET_DRAFTS_LIST
	*Return #SQLCODE: (SELECT * FROM DEV_MESSAGE_HISTORY WHERE SENDER_NUMBER = (Paramater 1) AND MESSAGE_STATUS = 'DRAFT' AND IS_ADMIN_MESSAGE = FALSE AND IS_SENDER_DELETED = FALSE;)
DEV_MESSAGE_GET_SENT_LIST
	*Return #SQLCODE: (SELECT * FROM DEV_MESSAGE_HISTORY WHERE SENDER_NUMBER = (Paramater 1) AND MESSAGE_STATUS = 'SENT' AND IS_ADMIN_MESSAGE = FALSE AND IS_SENDER_DELETED = FALSE;)
DEV_MESSAGE_GET_DELETE_LIST
	*Return #SQLCODE: (SELECT * FROM DEV_MESSAGE_HISTORY WHERE SENDER_NUMBER = (Paramater 1) AND IS_SENDER_DELETED = TRUE OR RECIPIENT_NUMBER = (Paramater 1) AND IS_RECIPIENT_DELETED = TRUE;)
DEV_MESSAGE_GET_MESSAGE - (Paramater 1: MESSAGE_ID) - (Paramater 2: Profile_NUMBER)
	*Return #SQLCODE: (SELECT * FROM DEV_MESSAGE_HISTORY WHERE MESSAGE_ID = (Parameter 1) AND SENDER_NUMBER = (Paramater 2) AND IS_SENDER_DELETED = FALSE OR MESSAGE_ID = (Parameter 1) AND RECIPIENT_NUMBER = (Paramater 2) AND IS_RECIPIENT_DELETED = FALSE;)
DEV_MESSAGE_SAVE_AS_NEW_DRAFT
	call: DEV_GENERIC_SET_ID_NUMBER - For the Message
	#SQLCODE: (INSERT INTO DEV_MESSAGE_HISTORY (MESSAGE_ID,SENDER_NUMBER,RECIPIENT_NUMBER,MESSAGE_STATUS,MESSAGE_BODY,IS_ADMIN_MESSAGE) VALUES((Paramater 1),(Paramater 2),(Paramater 3),'DRAFT',(Paramater 5),FALSE);
	*Return True/False
DEV_MESSAGE_UPDATE_EXISTING_DRAFT
	#SQLCODE: (UPDATE TABLE DEV_MESSAGE_HISTORY SET RECIPIENT_NUMBER = (Paramater 2),MESSAGE_BODY = (Paramater 3) WHERE MESSAGE_ID = (Paramater 1);)
	*Return True/False
DEV_MESSAGE_SEND_MESSAGE_DIRECT
	call: DEV_GENERIC_SET_ID_NUMBER - For the Message
	#SQLCODE: (INSERT INTO DEV_MESSAGE_HISTORY (MESSAGE_ID,SENDER_NUMBER,RECIPIENT_NUMBER,MESSAGE_STATUS,MESSAGE_BODY,DATE_SENT) VALUES((Paramater 1),(Paramater 2),(Paramater 3),'SENT',(Paramater 4),Current_Timestamp);)
	*Return True/False
DEV_MESSAGE_SEND_MESSAGE_FROM_DRAFTS
	#SQLCODE: (UPDATE TABLE DEV_MESSAGE_HISTORY SET RECIPIENT_NUMBER = (Paramater 2), MESSAGE_STATUS = 'SENT',MESSAGE_BODY=(Paramater 3),DATE_SENT = CURRENT_TIMESTAMP WHERE MESSAGE_ID = (Paramater 1);)
	*Return True/False
DEV_MESSAGE_DELETE_MESSAGE
	#SQLCODE: (UPDATE TABLE DEV_MESSAGE_HISTORY SET IS_SENDER_DELETED = TRUE, DATE_SENDER_DELETED = Current_Timestamp WHERE MESSAGE_ID = (Paramater 1), SENDER_NUMBER=(Paramater 2);)
	#SQLCODE: (UPDATE TABLE DEV_MESSAGE_HISTORY SET IS_RECIPIENT_DELETED = TRUE, DATE_RECIPIENT_DELETED = Current_Timestamp WHERE MESSAGE_ID = (Paramater 1), RECIPIENT_NUMBER=(Paramater 2);


/************** High Level Functionality Grouping: Media Management ***************/
DEV_MEDIA_ADD_MEDIA
	call: DEV_GENERIC_SET_ID_NUMBER - For the Media
	#SQLCODE: (INSERT INTO DEV_MEDIA_LIST (MEDIA_NUMBER,MEDIA_NAME,CREATOR_NUMBER,MEDIA_TYPE,MEDIA_LINK,IS_PRIVATE) VALUES ((Paramater 1),(Paramater 2),(Paramater 3),(Paramater 4),(Paramater 5),(Paramater 6);)
	*Return True/False
DEV_MEDIA_GET_MEDIA_LIST
	*Return #SQLCODE: (SELECT * FROM DEV_MEDIA_LIST WHERE CREATOR_NUMBER = (Paramater 1) AND IS_DELETED = FALSE;)
DEV_MEDIA_GET_MEDIA
	*Return #SQLCODE: (SELECT * FROM DEV_MEDIA_LIST WHERE MEDIA_NUMBER = (Paramater 1) AND IS_DELETED = FALSE;)
DEV_MEDIA_EDIT_MEDIA
	#SQLCODE: (UPDATE TABLE DEV_MEDIA_LIST SET MEDIA_NAME = (Paramater 1), IS_PRIVATE = (Paramater 2) WHERE MEDIA_NUMBER = (Paramater 3);)
	*Return True/False
DEV_MEDIA_DELETE_MEDIA
	#SQLCODE: (UPDATE TABLE DEV_MEDIA_LIST SET IS_DELETED = TRUE, DATE_DELETED  = Current_Timestamp WHERE  MEDIA_NUMBER = (Paramater 1);)
	*Return True/False
UnDelete Media ??? (To Be Added later)
View Friend media ??? (To Be Added later)


/************** High Level Functionality Grouping: Blog Management ***************/
DEV_BLOG_CREATE_BLOG
	call: DEV_GENERIC_SET_ID_NUMBER - For the Blog
	#SQLCODE: (INSERT INTO DEV_BLOG_POST (BLOG_NUMBER,BLOG_CREATOR_NUMBER,BLOG_TYPE,BLOG_MEDIA_LINK,BLOG_TEXT) VALUES((Paramater 1),(Paramater 2),(Paramater 3),(Paramater 4),(Paramater 5));
	*Return True/False
DEV_BLOG_EDIT_BLOG
	#SQLCODE: (UPDATE TABLE DEV_BLOG_POST SET BLOG_TYPE = (Paramater 1),BLOG_MEDIA_LINK = (Paramater 2),BLOG_TEXT = (Paramater 3) WHERE BLOG_NUMBER = (Paramater 3);)
	*Return True/False
DEV_BLOG_GET_BLOG
	*Return #SQLCODE: (SELECT * FROM DEV_BLOG_POST WHERE BLOG_NUMBER = (Paramater 1);)
DEV_BLOG_DELETE_BLOG
	#SQLCODE: (UPDATE TABLE DEV_BLOG_POST SET IS_DELETED = True, DATE_DELETED = Current_Timestamp WHERE BLOG_NUMBER = (Paramater 1);)
	*Return True/False
DEV_BLOG_GET_YOUR_BLOG_LIST	
	*Return #SQLCODE: (SELECT * FROM DEV_BLOG_POST WHERE BLOG_CREATOR_NUMBER = (Paramater 1) AND IS_DELETED = FALSE;)
get Blog News feed (Build Much Later)

